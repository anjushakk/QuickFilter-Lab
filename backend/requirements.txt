fastapi
uvicorn
numpy
pillow
gunicorn  # <-- This is new and important!

* `gunicorn` is a "production" server. It's used to run your `uvicorn` server robustly.

**2. Push Your Backend to GitHub:**
Render works best by connecting to a GitHub repository.
* Create a **new repository** on GitHub (e.g., "filter-app-backend").
* Push **only** the contents of your `backend` folder to this repository. (Your `main.py` and `requirements.txt` should be at the top level).

**3. Set up Render:**
* Go to [Render.com](https://render.com/) and sign up with your GitHub account.
* On your Dashboard, click **New+** -> **Web Service**.
* Connect the GitHub repository you just created (e.g., "filter-app-backend").
* Fill in the service details:
    * **Name:** `my-filter-api` (or anything you want).
    * **Root Directory:** (leave blank if `main.py` is at the top).
    * **Environment:** `Python 3`.
    * **Region:** (Choose one near you).
    * **Build Command:** `pip install -r requirements.txt` (this is usually the default).
    * **Start Command:** This is the most critical part. Copy and paste this:
        ```
        gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app
        ```
        *(This tells `gunicorn` to run your `main.py` file's `app` object).*
* Click **Create Web Service**.

Render will now build and deploy your app. It might take a few minutes. When it's done, you will get a public URL for your API, like:
`https://my-filter-api.onrender.com`

**Copy this URL!**

---

### Step 2: Host Your Frontend (HTML/CSS/JS) on Netlify

This part is much easier.

**1. Update Your JavaScript:**
Your `frontend/script.js` file is currently trying to contact your local server (`http://127.0.0.1:8000`). You **must** change this to your new public backend URL.

* Open `frontend/script.js`.
* Find this line (or similar):
    ```javascript
    const response = await fetch(`http://127.0.0.1:8000/process-image/${filterName}`, {
    ```
* **Change it** to use your new Render URL:
    ```javascript
    const response = await fetch(`https://my-filter-api.onrender.com/process-image/${filterName}`, {
    ```

**2. Deploy to Netlify:**
* Go to [Netlify.com](https://www.netlify.com/) and sign up.
* On your dashboard, find the "Sites" section.
* **Drag and drop** your **entire `frontend` folder** (the one with `index.html`, `style.css`, and your *updated* `script.js`) right onto the Netlify dashboard.
* That's it. Netlify will upload the folder and, in about 30 seconds, give you a public URL, like:
    `https://sparkling-biscuit-1234.netlify.app`

---

### Step 3: Fix CORS (The Final "Gotcha")

Your site is live! But it won't work yet.

If you open your Netlify site, you'll see a "CORS error" in the developer console (F12). This is a security rule: your backend at `onrender.com` doesn't trust requests from your frontend at `netlify.app`.

We have to tell your backend to trust your frontend.

1.  Go back to your **`backend/main.py`** file.
2.  Find your `CORSMiddleware` section.
3.  Change `allow_origins=["*"]` (which means "allow everyone") to *only* allow your new Netlify site URL.

    ```python
    # Get your Netlify site URL (e.g., "https://sparkling-biscuit-1234.netlify.app")
    
    origins = [
        "https://sparkling-biscuit-1234.netlify.app"
    ]
    
    app.add_middleware(
        CORSMiddleware,
        allow_origins=origins,  # <-- UPDATE THIS
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
